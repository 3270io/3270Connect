{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#introduction","title":"Introduction","text":"<p>3270Connect is a robust command-line utility designed specifically for enhancing productivity and efficiency in managing and automating interactions with mainframe 3270 applications. It acts as a bridge between modern computing environments and the traditional mainframe terminals, providing a suite of tools that facilitate automated tasks and workflows in a terminal session.</p> <p>The utility is used by system administrators, developers, and testers who frequently interact with mainframe systems, which are still pivotal in various industries such as banking, insurance, and government services. With 3270Connect, users can script complex sequences of tasks, automate data entry, perform complex online operations, and capture terminal screens for logging or debugging purposes.</p> <p>One of the main reasons for using 3270Connect is its ability to save time on repetitive tasks by automating them. This can be especially beneficial in testing scenarios where the same set of operations needs to be performed repeatedly. Moreover, the utility provides a way to integrate mainframe operations with modern CI/CD pipelines, thereby modernizing the development and deployment workflows that involve mainframe systems.</p> <p>With 3270Connect, users can:</p> <ul> <li>Define and execute automated workflows through a configuration file, enhancing repeatability and reliability in interactions with terminal screens.</li> <li>Capture the state of the 3270 terminal screens at any point during a workflow, which is invaluable for documentation and troubleshooting.</li> <li>Execute multiple workflows in parallel, optimizing time and resources, especially in complex test environments.</li> <li>Operate in a headless mode, allowing the automation to run in the background or in environments without a graphical interface, such as servers or continuous integration systems.</li> <li>Utilize a verbose output mode for an in-depth understanding of workflow execution, which assists in monitoring and debugging.</li> <li>Run 3270Connect as an API server, enabling advanced automation scenarios and facilitating load and performance testing of mainframe applications.</li> </ul> <p>Through these features, 3270Connect empowers organizations to integrate their legacy systems into modern automated processes, reducing errors, and increasing efficiency.</p>"},{"location":"#features","title":"Features","text":"<p>Here are the key features of 3270Connect:</p> <ul> <li>Running workflows defined in a configuration file.</li> <li>Capturing the 3270 screens as the workflow executes.</li> <li>Running workflows concurrently with options for controlling the number of concurrent workflows and runtime duration.</li> <li>Headless mode for running workflows without a graphical user interface.</li> <li>Verbose mode for detailed output.</li> <li>API mode for advanced automation.</li> <li>Running a 3270 sample application to assist with testing workflow features.</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>If you're new to 3270Connect, you can start by exploring the following sections:</p> <ul> <li>Installation: Learn how to install 3270Connect on your system.</li> <li>Basic Usage: Get started with basic usage, running workflows and sample 3270 application(s) to aid testing.</li> <li>Workflow Steps: Overview of the various workflow steps available in the 3270Connect application</li> </ul>"},{"location":"#advanced-features","title":"Advanced Features","text":"<p>Once you've mastered the basics, you can dive into more advanced features:</p> <ul> <li>API Mode: Discover how to run 3270Connect as an API server for advanced automation and load performance testing.</li> </ul>"},{"location":"#conclusion","title":"Conclusion","text":"<p>The 3270Connect command-line utility is a powerful tool for automating terminal emulator interactions. This documentation is here to help you make the most of it. If you have any questions or need assistance, feel free to reach out to the community or refer to the GitHub repository for more details.</p> <p>Let's get started with 3270Connect!</p>"},{"location":"#video-example","title":"Video example","text":""},{"location":"#3270connect-basic-usage","title":"3270Connect Basic Usage","text":""},{"location":"#3270connect-api-usage","title":"3270Connect API Usage","text":""},{"location":"advanced-features/","title":"Advanced Features","text":""},{"location":"advanced-features/#advanced-features","title":"Advanced Features","text":""},{"location":"advanced-features/#api-mode","title":"API Mode","text":"<p><code>3270Connect</code> can also run as an API server using the <code>-api</code> and <code>-api-port</code> flags:</p> <ul> <li><code>-api</code>: Run <code>3270Connect</code> as an API.</li> <li><code>-api-port</code>: Specifies the port for the API (default is 8080).</li> </ul> <p>To run <code>3270Connect</code> in API mode, use the following command:</p> <pre><code>3270Connect -api -api-port 8080\n</code></pre> <p>Once the API is running, you can send HTTP requests to it to trigger workflows and retrieve information.</p> <p>POST:</p> <pre><code>http://localhost:8080/api/execute\n</code></pre> <p>Body: </p><pre><code>{\n  \"Host\": \"10.27.27.27\",\n  \"Port\": 3270,\n  \"HTMLFilePath\": \"output.html\",\n  \"Steps\": [\n    {\n      \"Type\": \"InitializeHTMLFile\"\n    },\n    {\n      \"Type\": \"Connect\"\n    },\n    {\n      \"Type\": \"AsciiScreenGrab\"\n    },\n    {\n      \"Type\": \"CheckValue\",\n      \"Coordinates\": {\"Row\": 1, \"Column\": 2, \"Length\": 11},\n      \"Text\": \"Some: VALUE\"\n    },\n    {\n      \"Type\": \"FillString\",\n      \"Coordinates\": {\"Row\": 10, \"Column\": 44},\n      \"Text\": \"user1\"\n    },\n    {\n      \"Type\": \"FillString\",\n      \"Coordinates\": {\"Row\": 11, \"Column\": 44},\n      \"Text\": \"mypass\"\n    },\n    {\n      \"Type\": \"AsciiScreenGrab\"\n    },\n    {\n      \"Type\": \"PressEnter\"\n    },\n    {\n      \"Type\": \"AsciiScreenGrab\"\n    },\n    {\n      \"Type\": \"Disconnect\"\n    }\n  ]\n}\n</code></pre>"},{"location":"advanced-features/#api-mode-with-docker","title":"API Mode with Docker","text":"<p><code>3270Connect</code> can also run as an API server using the <code>-api</code> and <code>-api-port</code> flags:</p> <ul> <li><code>-api</code>: Run <code>3270Connect</code> as an API.</li> <li><code>-api-port</code>: Specifies the port for the API (default is 8080).</li> </ul> <p>To run <code>3270Connect</code> in API mode, use the following command:</p>"},{"location":"advanced-features/#linux","title":"Linux","text":"<pre><code>docker run --rm -p 8080:8080 3270io/3270connect-linux:latest -api -api-port 8080\n</code></pre>"},{"location":"advanced-features/#windows","title":"Windows","text":"<pre><code>docker run --rm -p 8080:8080 3270io/3270connect-windows:latest -api -api-port 8080\n</code></pre>"},{"location":"advanced-features/#3270connect-api-usage","title":"3270Connect API Usage","text":""},{"location":"basic-usage/","title":"Basic Usage","text":""},{"location":"basic-usage/#basic-usage","title":"Basic Usage","text":""},{"location":"basic-usage/#introduction","title":"Introduction","text":"<p>The basic usage of <code>3270Connect</code> involves running workflows defined in a configuration file. The configuration file specifies a sequence of actions to perform, such as connecting to a host, filling fields, and capturing screens. </p> <p>To run a workflow, use the following command:</p> <pre><code>3270Connect -config workflow.json\n</code></pre> <ul> <li><code>-config</code>: Specifies the path to the configuration file (default is \"workflow.json\").</li> </ul>"},{"location":"basic-usage/#running-workflows","title":"Running Workflows","text":""},{"location":"basic-usage/#single-workflow","title":"Single Workflow","text":"<p>To run a single workflow, create a JSON configuration file that describes the workflow steps. Here's an example configuration file:</p> <pre><code>{\n  \"Host\": \"10.27.27.62\",\n  \"Port\": 3270,\n  \"HTMLFilePath\": \"output.html\",\n  \"Steps\": [\n    {\n      \"Type\": \"InitializeHTMLFile\"\n    },\n    {\n      \"Type\": \"Connect\"\n    },\n    {\n      \"Type\": \"AsciiScreenGrab\"\n    },\n    {\n      \"Type\": \"CheckValue\",\n      \"Coordinates\": {\"Row\": 1, \"Column\": 29, \"Length\": 24},\n      \"Text\": \"3270 Example Application\"\n    },\n    {\n      \"Type\": \"FillString\",\n      \"Coordinates\": {\"Row\": 5, \"Column\": 21},\n      \"Text\": \"user1-firstname\"\n    },\n    {\n      \"Type\": \"FillString\",\n      \"Coordinates\": {\"Row\": 6, \"Column\": 21},\n      \"Text\": \"user1-lastname\"\n    },\n    {\n      \"Type\": \"AsciiScreenGrab\"\n    },\n    {\n      \"Type\": \"PressEnter\"\n    },\n    {\n      \"Type\": \"CheckValue\",\n      \"Coordinates\": {\"Row\": 1, \"Column\": 29, \"Length\": 24},\n      \"Text\": \"3270 Example Application\"\n    },\n    {\n      \"Type\": \"AsciiScreenGrab\"\n    },\n    {\n      \"Type\": \"Disconnect\"\n    }\n  ]\n}\n</code></pre> <p>In this example, the workflow connects to a host, captures the screen, fills a field, presses Enter, captures the screen again, and then disconnects.</p>"},{"location":"basic-usage/#concurrent-workflows","title":"Concurrent Workflows","text":"<p>You can run multiple workflows concurrently by specifying the <code>-concurrent</code> and <code>-runtime</code> flags:</p> <ul> <li><code>-concurrent</code>: Sets the number of concurrent workflows to run (default is 1).</li> <li><code>-runtime</code>: Specifies the duration to run workflows in seconds (only used in concurrent mode).</li> </ul> <p>For example, to run two workflows concurrently for 60 seconds, use:</p> <pre><code>3270Connect -config workflow.json -concurrent 2 -runtime 60\n</code></pre>"},{"location":"basic-usage/#configuration","title":"Configuration","text":""},{"location":"basic-usage/#headless-mode","title":"Headless Mode","text":"<p>You can run <code>3270Connect</code> in headless mode using the <code>-headless</code> flag. Headless mode is useful for running workflows without a graphical user interface.</p> <pre><code>3270Connect -config workflow.json -headless\n</code></pre>"},{"location":"basic-usage/#verbose-mode","title":"Verbose Mode","text":"<p>To enable verbose mode for detailed output, use the <code>-verbose</code> flag.</p> <pre><code>3270Connect -config workflow.json -verbose\n</code></pre>"},{"location":"basic-usage/#examples","title":"Examples","text":"<p>Let's explore some common use cases with examples:</p>"},{"location":"basic-usage/#1-running-a-basic-workflow","title":"1. Running a Basic Workflow","text":"<p>Run a basic workflow defined in \"workflow.json\":</p> <pre><code>3270Connect -config workflow.json\n</code></pre>"},{"location":"basic-usage/#2-running-multiple-workflows-concurrently","title":"2. Running Multiple Workflows Concurrently","text":"<p>Run two workflows concurrently for 60 seconds:</p> <pre><code>3270Connect -config workflow.json -concurrent 2 -runtime 60\n</code></pre>"},{"location":"basic-usage/#3-running-in-headless-mode","title":"3. Running in Headless Mode","text":"<p>Run a workflow in headless mode:</p> <pre><code>3270Connect -config workflow.json -headless\n</code></pre>"},{"location":"basic-usage/#4-using-the-api-mode","title":"4. Using the API Mode","text":"<p>Run <code>3270Connect</code> in API mode and interact with it using HTTP requests.</p> <ul> <li>API Mode: Discover how to run 3270Connect as an API server for advanced automation.</li> </ul>"},{"location":"basic-usage/#5-running-a-3270-sample-application-to-help-with-testing-the-workflow-features","title":"5. Running a 3270 sample application to help with testing the workflow features","text":"<p>As well as performing workflows on a 3270 running instance, 3270Connect can emulate a 3270 sample application using the github.com/racingmars/go3270 framework. Full credit go to <code>racingmars</code> for this great open source repo. </p> <p>Note</p> <p><code>github.com/racingmars/go3270</code> is Copyright (c) 2020 Matthew R. Wilson, under MIT License.</p> <p>Run a test 3270 sample application to assist with testing 3270Connect workflow features:</p> Available Apps <ul> <li> <p>[1] Example 1 application from https://github.com/racingmars/go3270</p> </li> <li> <p>[2] Dynamic RSS Reader</p> </li> </ul> <p></p><pre><code>3270Connect -runApp\n</code></pre> or <pre><code>3270Connect -runApp [number]\n</code></pre> <p>Once running and listening on port 3270, run a separate 3270 Connect to run a workflow against the sample 3270 application. The \"workflow.json\" provided with the root folder of the repo works with the sample application.</p>"},{"location":"basic-usage/#docker-usage","title":"Docker Usage","text":""},{"location":"basic-usage/#linux","title":"Linux","text":"<p>Pull the latest image:</p> <pre><code>docker pull 3270io/3270connect-linux:latest\n</code></pre> <p>Run the container with a configuration file:</p> <pre><code>docker run -it -v $(pwd)/workflow.json:/app/workflow.json -v $(pwd)/output.html:/app/output.html -p 3270:3270 3270io/3270connect-linux:latest -config /app/workflow.json\n</code></pre> <p>Run in headless mode:</p> <pre><code>docker run -it -v $(pwd)/workflow.json:/app/workflow.json -v $(pwd)/output.html:/app/output.html -p 3270:3270 3270io/3270connect-linux:latest -config /app/workflow.json -headless\n</code></pre> <p>Run in verbose mode:</p> <pre><code>docker run -it -v $(pwd)/workflow.json:/app/workflow.json -v $(pwd)/output.html:/app/output.html -p 3270:3270 3270io/3270connect-linux:latest -config /app/workflow.json -verbose\n</code></pre> <p>Run multiple workflows concurrently:</p> <pre><code>docker run -it -v $(pwd)/workflow.json:/app/workflow.json -v $(pwd)/output.html:/app/output.html -p 3270:3270 3270io/3270connect-linux:latest -config /app/workflow.json -concurrent 2 -runtime 60\n</code></pre> <p>Run a test 3270 sample application:</p> <pre><code>docker run -it -p 3270:3270 3270io/3270connect-linux:latest -runApp\n</code></pre> <p>Run a specific test 3270 sample application:</p> <pre><code>docker run -it -p 3270:3270 3270io/3270connect-linux:latest -runApp [number]\n</code></pre>"},{"location":"basic-usage/#windows","title":"Windows","text":"<p>Pull the latest image:</p> <pre><code>docker pull 3270io/3270connect-windows:latest\n</code></pre> <p>Run the container with a configuration file:</p> <pre><code>docker run -it -v ${PWD}/workflow.json:/app/workflow.json -v ${PWD}/output.html:/app/output.html -p 3270:3270 3270io/3270connect-windows:latest -config /app/workflow.json\n</code></pre> <p>Run in headless mode:</p> <pre><code>docker run -it -v ${PWD}/workflow.json:/app/workflow.json -v ${PWD}/output.html:/app/output.html -p 3270:3270 3270io/3270connect-windows:latest -config /app/workflow.json -headless\n</code></pre> <p>Run in verbose mode:</p> <pre><code>docker run -it -v ${PWD}/workflow.json:/app/workflow.json -v ${PWD}/output.html:/app/output.html -p 3270:3270 3270io/3270connect-windows:latest -config /app/workflow.json -verbose\n</code></pre> <p>Run multiple workflows concurrently:</p> <pre><code>docker run -it -v ${PWD}/workflow.json:/app/workflow.json -v ${PWD}/output.html:/app/output.html -p 3270:3270 3270io/3270connect-windows:latest -config /app/workflow.json -concurrent 2 -runtime 60\n</code></pre> <p>Run a test 3270 sample application:</p> <pre><code>docker run -it -p 3270:3270 3270io/3270connect-windows:latest -runApp\n</code></pre> <p>Run a specific test 3270 sample application:</p> <pre><code>docker run -it -p 3270:3270 3270io/3270connect-windows:latest -runApp [number]\n</code></pre>"},{"location":"basic-usage/#3270connect-basic-usage","title":"3270Connect Basic Usage","text":""},{"location":"basic-usage/#conclusion","title":"Conclusion","text":"<p>The <code>3270Connect</code> command-line utility offers a flexible way to automate interactions with terminal emulators. Whether you need to connect to hosts, manipulate screens, or run multiple workflows concurrently, <code>3270Connect</code> has you covered. Explore its features, experiment with different workflows, and streamline your terminal automation tasks.</p> <p>That's it! You're now ready to use <code>3270Connect</code> for your terminal automation needs, including the API mode for more advanced automation scenarios.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installation","title":"Installation","text":"<p>To use the 3270Connect command-line utility, you need to install it on your system. Follow the steps below based on your platform:</p>"},{"location":"installation/#linux","title":"Linux","text":""},{"location":"installation/#direct-installation","title":"Direct Installation","text":"<pre><code># Fetch the latest release URL\nLATEST_URL=$(curl -s https://api.github.com/repos/3270io/3270Connect/releases/latest | jq -r '.assets[] | select(.name == \"3270Connect\") | .browser_download_url')\n\n# Download the latest release\ncurl -LO $LATEST_URL\n\n# Make it executable\nchmod +x 3270Connect\n\n# Move to a directory in PATH\nsudo mv 3270Connect /usr/local/bin/3270Connect\n</code></pre>"},{"location":"installation/#docker-installation","title":"Docker Installation","text":"<pre><code># Pull the Docker image\ndocker pull 3270io/3270connect-linux:latest\n\n# Run the Docker container\ndocker run --rm -it 3270io/3270connect-linux:latest\n</code></pre>"},{"location":"installation/#additional-docker-run-examples-linux","title":"Additional Docker Run Examples (Linux)","text":"<p>Run the container with a configuration file and expose the port:</p> <pre><code>docker run -it -v $(pwd)/workflow.json:/app/workflow.json -v $(pwd)/output.html:/app/output.html -p 3270:3270 3270io/3270connect-linux:latest -config /app/workflow.json\n</code></pre> <p>Run in headless mode:</p> <pre><code>docker run -it -v $(pwd)/workflow.json:/app/workflow.json -v $(pwd)/output.html:/app/output.html -p 3270:3270 3270io/3270connect-linux:latest -config /app/workflow.json -headless\n</code></pre> <p>Run in verbose mode:</p> <pre><code>docker run -it -v $(pwd)/workflow.json:/app/workflow.json -v $(pwd)/output.html:/app/output.html -p 3270:3270 3270io/3270connect-linux:latest -config /app/workflow.json -verbose\n</code></pre> <p>Run multiple workflows concurrently:</p> <pre><code>docker run -it -v $(pwd)/workflow.json:/app/workflow.json -v $(pwd)/output.html:/app/output.html -p 3270:3270 3270io/3270connect-linux:latest -config /app/workflow.json -concurrent 2 -runtime 60\n</code></pre> <p>Run a test 3270 sample application:</p> <pre><code>docker run -it -p 3270:3270 3270io/3270connect-linux:latest -runApp\n</code></pre> <p>Run a specific test 3270 sample application:</p> <pre><code>docker run -it -p 3270:3270 3270io/3270connect-linux:latest -runApp [number]\n</code></pre>"},{"location":"installation/#windows","title":"Windows","text":""},{"location":"installation/#direct-installation_1","title":"Direct Installation","text":"<pre><code># Fetch the latest release URL\n$latest_url = Invoke-RestMethod -Uri https://api.github.com/repos/3270io/3270Connect/releases/latest | `\n    Select-Object -ExpandProperty assets | `\n    Where-Object { $_.name -eq \"3270Connect.exe\" } | `\n    Select-Object -ExpandProperty browser_download_url\n\n# Download the latest release\nInvoke-WebRequest -Uri $latest_url -OutFile 3270Connect.exe\n\n# Optionally, move to a directory in PATH (requires admin privileges)\n# Move-Item -Path 3270Connect.exe -Destination \"C:\\Program Files\\3270Connect.exe\"\n</code></pre>"},{"location":"installation/#docker-installation_1","title":"Docker Installation","text":"<pre><code># Pull the Docker image\ndocker pull 3270io/3270connect-windows:latest\n\n# Run the Docker container\ndocker run --rm -it 3270io/3270connect-windows:latest\n</code></pre>"},{"location":"installation/#additional-docker-run-examples-windows","title":"Additional Docker Run Examples (Windows)","text":"<p>Run the container with a configuration file and expose the port:</p> <pre><code>docker run -it -v ${PWD}/workflow.json:/app/workflow.json -v ${PWD}/output.html:/app/output.html -p 3270:3270 3270io/3270connect-windows:latest -config /app/workflow.json\n</code></pre> <p>Run in headless mode:</p> <pre><code>docker run -it -v ${PWD}/workflow.json:/app/workflow.json -v ${PWD}/output.html:/app/output.html -p 3270:3270 3270io/3270connect-windows:latest -config /app/workflow.json -headless\n</code></pre> <p>Run in verbose mode:</p> <pre><code>docker run -it -v ${PWD}/workflow.json:/app/workflow.json -v ${PWD}/output.html:/app/output.html -p 3270:3270 3270io/3270connect-windows:latest -config /app/workflow.json -verbose\n</code></pre> <p>Run multiple workflows concurrently:</p> <pre><code>docker run -it -v ${PWD}/workflow.json:/app/workflow.json -v ${PWD}/output.html:/app/output.html -p 3270:3270 3270io/3270connect-windows:latest -config /app/workflow.json -concurrent 2 -runtime 60\n</code></pre> <p>Run a test 3270 sample application:</p> <pre><code>docker run -it -p 3270:3270 3270io/3270connect-windows:latest -runApp\n</code></pre> <p>Run a specific test 3270 sample application:</p> <pre><code>docker run -it -p 3270:3270 3270io/3270connect-windows:latest -runApp [number]\n</code></pre>"},{"location":"workflow/","title":"Workflow Actions","text":""},{"location":"workflow/#workflow-steps-documentation","title":"Workflow Steps Documentation","text":"<p>This page provides an overview of the various workflow steps available in the 3270Connect application. Each step represents an individual action taken on the terminal during a workflow execution.</p>"},{"location":"workflow/#available-workflow-steps","title":"Available Workflow Steps","text":""},{"location":"workflow/#initializeoutput","title":"InitializeOutput","text":"<ul> <li>Description: Initializes the output file with run details.</li> <li>Parameters: <code>outputFilePath</code> (string) - Path to the output file.</li> <li>Usage: This step is used to set up the output file before executing other steps.</li> </ul>"},{"location":"workflow/#connect","title":"Connect","text":"<ul> <li>Description: Establishes a connection to the terminal.</li> <li>Usage: This step is essential to start the interaction with the terminal.</li> </ul>"},{"location":"workflow/#checkvalue","title":"CheckValue","text":"<ul> <li>Description: Checks a value at specified coordinates on the terminal screen.</li> <li>Parameters: </li> <li><code>Coordinates</code> (connect3270.Coordinates) - The row and column to check the value.</li> <li><code>Text</code> (string) - The expected text value at the coordinates.</li> <li>Usage: Utilized to verify if the terminal displays expected data at specified locations.</li> </ul>"},{"location":"workflow/#fillstring","title":"FillString","text":"<ul> <li>Description: Fills a string at specified coordinates on the terminal screen.</li> <li>Parameters: </li> <li><code>Coordinates</code> (connect3270.Coordinates) - The row and column to fill the string.</li> <li><code>Text</code> (string) - The text to fill at the coordinates.</li> <li>Usage: This step is used to input text at a specific position on the terminal.</li> </ul>"},{"location":"workflow/#asciiscreengrab","title":"AsciiScreenGrab","text":"<ul> <li>Description: Captures and appends the ASCII representation of the current screen to the output file.</li> <li>Parameters: <code>outputFilePath</code> (string) - Path to the output file.</li> <li>Usage: To capture the current state of the terminal screen as ASCII text.</li> </ul>"},{"location":"workflow/#pressenter","title":"PressEnter","text":"<ul> <li>Description: Simulates pressing the Enter key.</li> <li>Usage: Commonly used to submit data or commands entered on the terminal.</li> </ul>"},{"location":"workflow/#disconnect","title":"Disconnect","text":"<ul> <li>Description: Disconnects from the terminal.</li> <li>Usage: This step is used to end the terminal session cleanly.</li> </ul>"},{"location":"workflow/#example-workflow","title":"Example Workflow","text":"<p>Here is an example of how these steps might be sequenced in a typical workflow:</p> <ol> <li>InitializeOutput: Set up the output file.</li> <li>Connect: Connect to the terminal.</li> <li>FillString: Input a username at the specified coordinates.</li> <li>PressEnter: Submit the username.</li> <li>FillString: Input a password at the specified coordinates.</li> <li>PressEnter: Submit the password.</li> <li>CheckValue: Verify successful login by checking for a welcome message.</li> <li>AsciiScreenGrab: Capture the screen after login.</li> <li>Disconnect: Disconnect from the terminal.</li> </ol> <p>Each step plays a crucial role in the automated interaction with the terminal. By combining these steps, complex workflows can be executed seamlessly.</p>"}]}